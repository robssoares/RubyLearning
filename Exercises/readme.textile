h3. Exercises - Week 01

+Try and write your code with whatever Ruby we have learned so far.+
Experimente e escreva seu codigo Ruby com o que aprendemos ate agora.

+Please discuss all these exercises in the relevant thread in the Lesson 1 Forum.+
Por favor, discutir todos estes exercicios no segmento relevante na Licao 1 Forum




+Exercise1. Before executing the code given below, guess the results. Next, execute the code. Did you get it right? If you did not get it right, can you think of why?+
Exercise1. Antes de executar o codigo abaixo, acho que os resultados. Em seguida, executar o codigo. Voce quis fazer isso certo? Se voce nao acertar, voce pode pensar em que?


+Discuss your first guess and what you got when running the code.+
+Goal: Understanding operator precedence and association.+
Discutir acho que o seu primeiro e que voce tem ao executar o codigo.
Objetivo: Compreender a precedencia do operador e de associacao.

@y = false@
@z = true@
@x = y or z@
@puts x  = false@
(x recebe y primeiramente, ele nao analisa o OR)

@(x = y) or z@
@puts x = false@
(x é forçado a receber y, ele nao analisa o OR)

@x = (y or z)@
@puts x = true@
(x recebe verdadeiro pela analise entre os dois valores)


+Exercise2. Read the sprintf documentation and the % documentation in the String class and figure out the output being printed by of this Ruby code.+
Exercise2. Leia a documentacao sprintf e a documentacao %  na classe String e descobrir a saida que esta sendo impresso pela deste codigo Ruby.

@puts "%05d" % 123@
(formata a saida com 5 digitos == 00123)



+Exercise3. Write a Ruby program that displays how old I am, if I am 979000000 seconds old. Display the result as a floating point (decimal) number to two decimal places (for example, 17.23).+
+Note: To format the output to say 2 decimal places, we can use the Kernel's format method. For example, if x = 45.5678 then format("%.2f", x) will return the string 45.57+

Esforço3. Escreva um programa Ruby que exibe quantos anos eu tenho, se eu sou 979000000 segundo idade. Mostrar o resultado em um numero de ponto flutuante (decimal), com duas casas decimais (por exemplo, 17,23).
Observacao: Para formatar a saida de dizer duas casas decimais, podemos utilizar o metodo do kernel formato. Por exemplo, se x = 45,5678, entao o formato ("% .2 f", x) irá retornar a string 45,57




+Exercise4. Write a Ruby program that tells you how many minutes there are in a year (do not bother right now about leap years etc.).+
Exercicio4. Escreva um programa Ruby que informa quantos minutos ha em um ano (nao se incomode agora sobre os anos bissextos, etc.)



+Exercise5. The following program prints the value of the variable. Why? +
Exercicio5. O programa a seguir imprime o valor da variavel. Por quê?

@my_string = 'Hello Ruby World'@
@def my_string@
@  'Hello World'@
@end@
@puts my_string@



+Exercise6. Write a method called convert that takes one argument which is a temperature in degrees Fahrenheit. This method should return the temperature in degrees Celsius. 
To format the output to say 2 decimal places, we can use the Kernel's format method. For example, if x = 45.5678 then format("%.2f", x) will return the string 45.57. Another way is to use the round function as follows:+ 
@puts (x*100).round/100.0@
+Discuss these exercises in the Week 1 Forum.+

Exercicio6. Escrever um metodo chamado converter que tem um argumento que e uma temperatura em graus Fahrenheit. Este metodo deve retornar a temperatura em graus Celsius.
Para formatar a saida com duas casas decimais, podemos utilizar o metodo do kernel formato. Por exemplo, se x = 45,5678, entao o formato ("% .2 f", x) ira retornar a string 45,57. Outra maneira e usar a funcao round como segue:
@puts (x*100).round/100.0@
Discutir estes exercicios na Semana 1 Fórum.



h3. Exercises - Week 02

+Try and write your code with whatever Ruby we have learned so far+
Experimente e escreva seu codigo Ruby com o que temos aprendido ate agora


+Exercise1. Why is the output of this program:+ 
Exercise1. Porque e que a saida deste programa:


@def method@
 @a = 50@
 @puts a@
@end@
@a = 10@
@method@
@puts a@

Resultado: 50 e 10, ele imprime o valor do metodo e da variavel independente.




+Exercise2. A plain text file has the following contents+
Um arquivo de texto tem o seguinte conteudo

@test test test test test
test test test test test
test test test test test
test test test test test
test test test test test
test test *word* test test
test test test test test
test test test test test
test test test test test
test test test test test
test test test test test@





+Observe that in this file, there exists a word 'word'. Write a clever but readable Ruby program that updates this file and the final contents become like this:+
Observe que nesse arquivo, existe "word" uma palavra. Escreva um programa inteligente, mas legivel Ruby que atualiza este arquivo e ao conteudo final se assim:


@test test test test test
test test test test test
test test test test test
test test test test test
test test test test test
test test *inserted word* test test
test test test test test
test test test test test
test test test test test
test test test test test
test test test test test@

+Do not hard-code the file name+
Nao embutir o nome do arquivo



+Exercise3. Make use of the class Dir for the following+
Faca uso da Dir classe para a seguinte


+Display your current working directory.+
Mostrar o diretório de trabalho atual.
@puts Dir.pwd@

+Create a new directory tmp under your working directory.+
Crie um novo diretório tmp do seu diretório de trabalho.
@Dir.mkdir("tmp")@


+Change your working directory to tmp+
Alterar o diretório de trabalho para tmp
@Dir.chdir("tmp")@

+Display your current working directory.+
Mostrar o diretório de trabalho atual.
@puts Dir.pwd@

+Go back to your original directory.+
Volte ao seu diretório original.
@Dir.chdir("..")@

+Delete the tmp directory.+
Apague o diretório tmp.
@Dir.rmdir("tmp")@


+Exercise4. Given the following Ruby code snippet+
Exercício4. Dado o seguinte trecho de código Ruby

@a = (1930...1951).to_a@
@puts a[rand(a.size)]@

+When you run this program, which of the following values will not be displayed? +
Quando voce executar este programa, qual dos seguintes valores nao serao exibidos?

1.1929
2.1930
3.1945
4.1950
5.1951
6.1952


+Explain why that value will not be displayed.+
Explique por que esse valor nao sera exibido.

+Also, have a look at the splat operator:+
Alem disso, ter um olhar para o operador splat:

@a = [*1930...1951] # splat operator@


+Exercise5. Given a string s = 'key=value', create two strings s1 and s2 such that s1 contains key and s2 contains value. Hint: Use some of the String functions.+
Exercicio5. Dado uma string s = "chave = valor ', cria duas sequencias S1 e S2 de tal forma que contem a chave S1 e S2 contem valor. Dica: Use algumas das funcoes String.


+Exercise6. Write a Deaf Grandma program. Whatever you say to grandma (whatever you type in), she should respond with HUH?! SPEAK UP, SONNY!, unless you shout it (type in all capitals). If you shout, she can hear you (or at least she thinks so) and yells back, NO, NOT SINCE 1938! To make your program really believable, have grandma shout a different year each time; maybe any year at random between 1930 and 1950. You can't stop talking to grandma until you shout BYE.+
Exercício6. Escrever um programa de Surdos da avo. Tudo o que voce diz para a avo (o que voce digitar), ela deve responder com huh? SPEAK UP, SONNY!, A menos que voce grite (tipo em todas as capitais). Se voce gritar, ela pode ouvir voce (ou pelo menos ela pensa assim) e grita de volta, sem, desde que nao 1938! Para fazer o seu programa realmente crivel, tem avo mensagem para um ano diferente de cada vez, talvez no ano que qualquer aleatoriamente entre 1930 e 1950. Voce nao pode parar de falar com a avo ate que voce mensagem BYE.


For example:

You enter: Hello Grandma
Grandma responds: HUH?! SPEAK UP, SONNY!
You enter: HELLO GRANDMA
Grandma responds: NO, NOT SINCE 1938!


+Exercise7. First of all, I'd like to thank Peter Cooper for allowing me to use this exercise.+
+The application you're going to develop will be a text analyzer. You will be working on it this and next week. Your Ruby code will read in text supplied in a separate file, analyze it for various patterns and statistics, and print out the results for the user. It's not a 3D graphical adventure or a fancy Web site, but text processing programs are the bread and butter of systems administration and most application development. They can be vital for parsing log files and user-submitted text on Web sites, and manipulating other textual data. With this application you'll be focusing on implementing the features quickly, rather than developing an elaborate object-oriented structure, any documentation, or a testing methodology.+

Exercise7. Primeiro de tudo, gostaria de agradecer a Peter Cooper por me permitir fazer este exercicio.
A aplicacao que estamos desenvolvendo sera um analisador de texto. Voce estara trabalhando nisso neste e na proxima semana. Seu codigo Ruby vai ler no texto fornecido em um arquivo separado, analisa-la para varios padroes e estatisticas, e imprimir os resultados para o usuario. Nao e uma aventura grafica em 3D ou um Web site extravagante, mas os programas de processamento de texto sao o pao e a manteiga de administracao de sistemas e desenvolvimento de aplicacao mais. Eles podem ser vitais para analisar arquivos de log e texto enviado pelo usuario em sites da Web e manipulando outros dados textual. Com este aplicativo voce vai estar se concentrando na aplicacao dos recursos rapidamente, em vez de desenvolver uma elaborada estrutura orientada a objetos, qualquer documentacao, ou uma metodologia de testes.


+Your text analyzer will provide the following basic statistics:
1.Character count
2.Character count (excluding spaces)
3.Line count
4.Word count
5.Sentence count
6.Paragraph count
7.Average number of words per sentence
8.Average number of sentences per paragraph+


Seu texto analisador irá fornecer as seguintes estatísticas básicas:

1-Contagem de caracteres
2-Contagem de caracteres (excluindo espaços)
3-contagem Line
4-A contagem da palavra
5-contagem de Sentença
6-Parágrafo contagem
7-Número médio de palavras por frase
8-Número médio de sentenças por parágrafo


+In the last two cases, the statistics are easily calculated from the word count, sentence count, and paragraph count. That is, once you have the total number of words and the total number of sentences, it becomes a matter of a simple division to work out the average number of words per sentence.+
+Before you start to code, the first step is to get some test data that your analyzer can process. You can find the text at:+

Nos dois ultimos casos, as estatisticas sao facilmente calculados a partir da contagem da palavra, cada frase, e contagem de numero. Ou seja, quando voce tem o numero total de palavras eo numero total de sentencas, ele se torna uma questao de uma divisao simples de trabalhar com o numero medio de palavras por frase.
Antes de comecar a codificar, e o primeiro passo para obter alguns dados de teste que o analisador pode processar. Voce pode encontrar o texto em:

+Save the file in the same folder as your other Ruby programs and call it text.txt. Your application will read from text.txt by default (although you'll make it more dynamic and able to accept other sources of data later on).+
Salve o arquivo na mesma pasta que os outros programas Ruby e chama-lo de texto.txt. Seu pedido sera lido text.txt por padrao (embora voce torna-lo mais dinamico e capaz de aceitar outras fontes de dados mais adiante).


+Let me outline the basic steps you need to follow:
1.Load in a file containing the text or document you want to analyze.
2.As you load the file line by line, keep a count of how many lines there are (one of your statistics taken care of).
3.Put the text into a string and measure its length to get your character count.
4.Temporarily remove all whitespace and measure the length of the resulting string to get the character count excluding spaces.
5.Split on whitespace to find out how many words there are.
6.Split on full stops (.), '!' and '?' to find out how many sentences there are.
7.Split on double newlines to find out how many paragraphs there are.
8.Perform calculations to work out the averages.+

Permitam-me descrever os passos basicos que você precisa seguir:

Carga em um arquivo contendo o texto ou documento que voce deseja analisar.
Ao carregar o arquivo linha por linha, manter uma contagem de quantas linhas existem (uma das suas estatisticas de cuidado).
Coloca o texto em uma sequencia e medida do seu comprimento para obter a sua contagem de caracteres.
Temporariamente remover todos os espacos e medir o comprimento da string resultante para obter a contagem de caracteres, excluindo espacos.
Dividir com espacos em branco para descobrir quantas palavras existem.
Dividir em pontos finais (.) '!' e '? para descobrir como muitas frases que existem.
Dividir em novas linhas de casal para descobrir quantos paragrafos existem.
Efetuar calculos para descobrir as medias.

+Create a new, blank Ruby source file and save it as analyzer.rb in your Ruby folder.+
Crie um novo arquivo de origem em branco Ruby e salvá-lo como analyzer.rb na sua pasta Ruby.











