h2. ACOMPANHAMENTO DO CURSO RUBYLEARNING.ORG

h3. 23/10/2010 - Primeira Semana

*- Ruby Coding Style / Convention*
  - Unofficial Ruby Usage Guide
  - Ruby 101: Naming Conventions
  - Ruby Coding Convention

*- Link: The Philosophi of Ruby*
  - Conversa com Yukihiro Matsumoto 

*- FORPC101 Course Ruby Programs*

  - Excercícios em Ruby 
	*1)* @puts "hello"@

	*2)* @puts 3 / 2@     => Divisão de Inteiros, resultado é Inteiro.

	*3)* @puts 1.5 / 2.6@ => Divisão de Decimais, resultado é Decimal.

	*4)* Para exibir algum caracterer que seja um comando, usamos a Barra(\) como escape, ex:
	@puts "Essa é a gota d\'agua"@ ==> É necessário a barra para informar que o caracter (') deve ser exibido e não executado.

	*5)* Diferença entre Aspas Simples (') e Aspas Duplas (")
		Ambas podem ser utilizadas, porém em alguns casos tem resultados diferentes, como na interpolação: 
	@PI = 3.1416@ 
	@puts "O número é #{PI}"@ ==> O número é 3.1416
	@puts 'O número é #{PI}'@ ==> o número é #{PI}
 
	*6)* Conversão de caracteres: 
	@var1 = 5@	==> numero
	@var2 = '2'@	==> string
	@puts var1 + var2@	==> errado, número com string não calcula
	@puts var1 + var2.to_i@	==> certo, string convertida em inteiro

	*7)* Anexando informações à string
	@a = 'hello'@  
	@a << ' word.'@  ==> inseriu informação à variavel. 
	@puts a@  ==> hello word. 
	 

	*8)* Delimitador de Conteúdo: o simbolo << também pode marcar o início de uma sequência de caracteres, utilizando um delimitador de sua escolha. A sequencia inicia a partir da próxima linha e termina quando o delimitador é repedito novamente. Exemplo:
	@var1 = <<END_STR@ 
	@Este é o conteudo desta variavel, podemos escrever até@
	@em outra linha, até encontrar o delimitador, o mesmo@ 
	@usado no inicio.@
	@END_STR@
	@puts var1@
  	
	*9)* Gets e Chomp: Recebe e Remove caracter de retorno de carro (\n).

	@puts "Qual sua cidade ?"@
	@STDOUT.flush@  ==> Limpa o buffer de saída (vídeo)
	@city = gets.chomp@ ==> O conteúdo digitado, sem caracter \n (retorno de carro)
	@puts "Minha cidade é " + city @

	*10)* Formatando Casas Decimais
	@puts 35 / 1.5@ ==> 23.333333333333332
	@puts format("%.2f", 35 / 1.5)@ ==> 23.33
   
	
	*11)* Ruby é dinamico
	
Variável não tem que ser definida antes, ela identifica o seu tipo pelo tipo de informação.
	@x = 7@		==> integer
	@x = "house"@	==> string
	@x = 7.5@	==> float

Em Ruby qualquer coisa pode ser manipulada como objeto.
	@"I love Ruby".length@	==> 11 caracteres 	


	*12)* Métodos em Ruby

	Método Simples:
	@def diga_oi@
		@"Hello !"@ 
	@end@
	#usando o metodo
	puts diga_oi

	Método com 1 parâmetro:
	@def diga_oi(nome)@
		@"Hello ! " + nome@
	@end@
	puts diga_oi("Roberta")
	*O uso do parenteses é opcional












	*12)* Primeiro Caracter de um nome Ruby pode identifica seu uso. 
 
	Variáveis de Instância = nomes iniciam com @
	Variáveis de Classe    = nomes inicial com @@
	Variáveis Globais      = nomes iniciam com $
	Constantes             = Nomes Iniciam MAIUSCULO
	Métodos                = nomes iniciam minusculo 



	










	
	 






  

- Week 1: Tutorial

- How to use IRB

- Some useful Ruby Methods

- Week 1: Exercises

- Week 1: Forum

- Week 1: Quiz
